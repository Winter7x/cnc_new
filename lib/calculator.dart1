import 'package:flutter/material.dart';

class CNCCalculationsScreen extends StatefulWidget {
  @override
  _CNCCalculationsScreenState createState() => _CNCCalculationsScreenState();
}

class _CNCCalculationsScreenState extends State<CNCCalculationsScreen> {
  String? activeCalculation;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(activeCalculation == null
            ? 'CNC Calculations'
            : activeCalculation!),
        leading: activeCalculation != null
            ? IconButton(
                icon: Icon(Icons.arrow_back),
                onPressed: () {
                  setState(() {
                    activeCalculation = null;
                  });
                },
              )
            : null,
      ),
      body: activeCalculation == null
          ? GridView.count(
              crossAxisCount: 3,
              padding: EdgeInsets.all(16.0),
              crossAxisSpacing: 16.0,
              mainAxisSpacing: 16.0,
              children: [
                _buildTile(
                  context,
                  icon: Icons.speed,
                  label: 'Feed Rate',
                  onTap: () {
                    setState(() {
                      activeCalculation = 'Feed Rate';
                    });
                  },
                ),
                _buildTile(
                  context,
                  icon: Icons.rotate_right,
                  label: 'Spindle Speed',
                  onTap: () {
                    setState(() {
                      activeCalculation = 'Spindle Speed';
                    });
                  },
                ),
                _buildTile(
                  context,
                  icon: Icons.layers,
                  label: 'Material Removal Rate',
                  onTap: () {
                    setState(() {
                      activeCalculation = 'Material Removal Rate';
                    });
                  },
                ),
                _buildTile(
                  context,
                  icon: Icons.vertical_align_center,
                  label: 'Depth of Cut',
                  onTap: () {
                    setState(() {
                      activeCalculation = 'Depth of Cut';
                    });
                  },
                ),
                _buildTile(
                  context,
                  icon: Icons.build,
                  label: 'Tool Life',
                  onTap: () {
                    setState(() {
                      activeCalculation = 'Tool Life';
                    });
                  },
                ),
                _buildTile(
                  context,
                  icon: Icons.line_weight,
                  label: 'Cutting Force',
                  onTap: () {
                    setState(() {
                      activeCalculation = 'Cutting Force';
                    });
                  },
                ),
                _buildTile(
                  context,
                  icon: Icons.power,
                  label: 'Power Requirement',
                  onTap: () {
                    setState(() {
                      activeCalculation = 'Power Requirement';
                    });
                  },
                ),
                _buildTile(
                  context,
                  icon: Icons.timeline,
                  label: 'Chip Load',
                  onTap: () {
                    setState(() {
                      activeCalculation = 'Chip Load';
                    });
                  },
                ),
                _buildTile(
                  context,
                  icon: Icons.square_foot,
                  label: 'Clearance and Taper Angles',
                  onTap: () {
                    setState(() {
                      activeCalculation = 'Clearance and Taper Angles';
                    });
                  },
                ),
                _buildTile(
                  context,
                  icon: Icons.center_focus_strong,
                  label: 'CNC Offsets',
                  onTap: () {
                    setState(() {
                      activeCalculation = 'CNC Offsets';
                    });
                  },
                ),
                _buildTile(
                  context,
                  icon: Icons.format_list_numbered,
                  label: 'Hole or Thread Calculations',
                  onTap: () {
                    setState(() {
                      activeCalculation = 'Hole or Thread Calculations';
                    });
                  },
                ),
              ],
            )
          : _buildCalculationDetails(),
    );
  }

  Widget _buildTile(BuildContext context,
      {required IconData icon,
      required String label,
      required VoidCallback onTap}) {
    return InkWell(
      onTap: onTap,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Card(
            elevation: 4,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(15),
            ),
            child: Padding(
              padding: const EdgeInsets.all(12.0),
              child: Icon(icon, size: 36, color: Colors.teal),
            ),
          ),
          const SizedBox(height: 8),
          Text(
            label,
            style: const TextStyle(
              fontSize: 9,
              fontWeight: FontWeight.bold,
              height: 1.2,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildCalculationDetails() {
    switch (activeCalculation) {
      case 'Feed Rate':
        return _buildFeedRateCalculator();
      case 'Spindle Speed':
        return _buildSpindleSpeedCalculator();
      //  case 'Material Removal Rate':
      //   return _buildMaterialRemovalRateCalculator();
      // case 'Depth of Cut':
      //   return _buildDepthOfCutCalculator();
      // case 'Tool Life':
      //   return _buildToolLifeCalculator();
      // case 'Cutting Force':
      //   return _buildCuttingForceCalculator();
      // case 'Power Requirement':
      //   return _buildPowerRequirementCalculator();
      // case 'Chip Load':
      //   return _buildChipLoadCalculator();
      // case 'Clearance and Taper Angles':
      //   return _buildClearanceAndTaperAnglesCalculator();
      // case 'CNC Offsets':
      //   return _buildCNCOffsetsCalculator();
      // case 'Hole or Thread Calculations':
      //   return _buildHoleOrThreadCalculationsCalculator();
      default:
        return Center(child: Text('Unknown Calculation'));
    }
  }

  Widget _buildFeedRateCalculator() {
    TextEditingController spindleSpeedController = TextEditingController();
    TextEditingController feedPerToothController = TextEditingController();
    TextEditingController numTeethController = TextEditingController();

    return Padding(
      padding: EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Formula: F = N × f × t',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: Colors.black87,
            ),
          ),
          SizedBox(height: 16.0),
          _buildTextField(spindleSpeedController, 'Spindle Speed (N) in RPM'),
          SizedBox(height: 16.0),
          _buildTextField(
              feedPerToothController, 'Feed per Tooth (f) in mm/tooth'),
          SizedBox(height: 16.0),
          _buildTextField(numTeethController, 'Number of Cutting Teeth (t)'),
          SizedBox(height: 16.0),
          ElevatedButton(
            onPressed: () {
              double spindleSpeed =
                  double.tryParse(spindleSpeedController.text) ?? 0;
              double feedPerTooth =
                  double.tryParse(feedPerToothController.text) ?? 0;
              double numTeeth = double.tryParse(numTeethController.text) ?? 0;

              double feedRate = spindleSpeed * feedPerTooth * numTeeth;

              showDialog(
                context: context,
                builder: (_) => AlertDialog(
                  title: Text('Feed Rate Result'),
                  content:
                      Text('Feed Rate: ${feedRate.toStringAsFixed(2)} mm/min'),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: Text('OK'),
                    ),
                  ],
                ),
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blueAccent,
              padding: EdgeInsets.symmetric(vertical: 12.0, horizontal: 24.0),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8)),
            ),
            child: Text(
              'Calculate',
              style: TextStyle(fontSize: 16, color: Colors.white),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTextField(TextEditingController controller, String hintText) {
    return TextField(
      controller: controller,
      keyboardType: TextInputType.number,
      decoration: InputDecoration(
        labelText: hintText,
        border: OutlineInputBorder(),
      ),
    );
  }

  Widget _buildSpindleSpeedCalculator() {
    TextEditingController cuttingSpeedController = TextEditingController();
    TextEditingController toolDiameterController = TextEditingController();

    return Padding(
      padding: EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Formula: N = (V × 1000) / (π × D)',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: Colors.black87,
            ),
          ),
          SizedBox(height: 16.0),
          _buildTextField(
            cuttingSpeedController,
            'Cutting Speed (V) in m/min',
          ),
          SizedBox(height: 16.0),
          _buildTextField(
            toolDiameterController,
            'Tool Diameter (D) in mm',
          ),
          SizedBox(height: 16.0),
          ElevatedButton(
            onPressed: () {
              double cuttingSpeed =
                  double.tryParse(cuttingSpeedController.text) ?? 0;
              double toolDiameter =
                  double.tryParse(toolDiameterController.text) ?? 0;

              if (cuttingSpeed > 0 && toolDiameter > 0) {
                double spindleSpeed =
                    (cuttingSpeed * 1000) / (3.14159 * toolDiameter);

                showDialog(
                  context: context,
                  builder: (_) => AlertDialog(
                    title: Text('Spindle Speed Result'),
                    content: Text(
                      'Spindle Speed: ${spindleSpeed.toStringAsFixed(2)} RPM',
                    ),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.pop(context),
                        child: Text('OK'),
                      ),
                    ],
                  ),
                );
              } else {
                showDialog(
                  context: context,
                  builder: (_) => AlertDialog(
                    title: Text('Invalid Input'),
                    content: Text(
                      'Please enter valid values for Cutting Speed and Tool Diameter.',
                    ),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.pop(context),
                        child: Text('OK'),
                      ),
                    ],
                  ),
                );
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blueAccent,
              padding: EdgeInsets.symmetric(vertical: 12.0, horizontal: 24.0),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            child: Text(
              'Calculate',
              style: TextStyle(fontSize: 16, color: Colors.white),
            ),
          ),
        ],
      ),
    );
  }
}
